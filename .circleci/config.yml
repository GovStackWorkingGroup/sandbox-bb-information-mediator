version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-eks: circleci/aws-eks@2.1.2
  helm: circleci/helm@1.0
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  deploy-information-mediator:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - helm/install-helm-client:
          version: v3.2.0
      - aws-cli/setup:
          role-arn: 'arn:aws:iam::463471358064:role/CircleCIRole'
          aws-region: AWS_DEFAULT_REGION
          profile-name: CircleCIRole
          role-session-name: CircleSession
          session-duration: '1800' 
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: "${AWS_CLUSTER_NAME}"
          cluster-authentication-role-arn: arn:aws:iam::463471358064:role/CircleCIRole
      - run:
          name: Debug
          command: aws sts get-caller-identity
      - run:
          name: Update kubectl
          command: |
            aws eks update-kubeconfig --region "${AWS_DEFAULT_REGION}" --name "${AWS_CLUSTER_NAME}" --role-arn arn:aws:iam::463471358064:role/CircleCIRole
      - run:
          name: Install secrets for Information Mediator
          command: |
            export NAMESPACE="${AWS_NAMESPACE}"
            export XROAD_CS_ENABLED="${XROAD_CS_ENABLED}"
            export XROAD_SSC_ENABLED="${XROAD_SSC_ENABLED}"
            export XROAD_SSM_ENABLED="${XROAD_SSM_ENABLED}"
            export XROAD_SSP_ENABLED="${XROAD_SSP_ENABLED}"
            export SECRETS_ENABLED="${GENERATE_NEW_SECRETS}"
            export POSTGRES_ENABLED="false"
            export APPLICATION_ENABLED="false"
            cp ./information-mediator/values.yaml val.yaml
            sed -i 's/${NAMESPACE}/'"$NAMESPACE"'/g' val.yaml
            sed -i 's/${XROAD_CS_ENABLED}/'"$XROAD_CS_ENABLED"'/g' val.yaml
            sed -i 's/${XROAD_SSC_ENABLED}/'"$XROAD_SSC_ENABLED"'/g' val.yaml
            sed -i 's/${XROAD_SSM_ENABLED}/'"$XROAD_SSM_ENABLED"'/g' val.yaml
            sed -i 's/${XROAD_SSP_ENABLED}/'"$XROAD_SSP_ENABLED"'/g' val.yaml
            sed -i 's/${POSTGRES_ENABLED}/'"$POSTGRES_ENABLED"'/g' val.yaml
            sed -i 's/${SECRETS_ENABLED}/'"$SECRETS_ENABLED"'/g' val.yaml
            sed -i 's/${APPLICATION_ENABLED}/'"$APPLICATION_ENABLED"'/g' val.yaml
#            helm upgrade --install information-mediator ./information-mediator/ -f val.yaml
      - run:
          name: Install postgres for Information Mediator
          command: |
            export NAMESPACE="${AWS_NAMESPACE}"
            export XROAD_CS_ENABLED="${XROAD_CS_ENABLED}"
            export XROAD_SSC_ENABLED="${XROAD_SSC_ENABLED}"
            export XROAD_SSM_ENABLED="${XROAD_SSM_ENABLED}"
            export XROAD_SSP_ENABLED="${XROAD_SSP_ENABLED}"
            export PGDATA_FOLDER="${PGDATA}"
            export PGDATA=$(echo ${PGDATA_FOLDER//\//\\/})
            export POSTGRES_USER="${POSTGRES_USER}"
            export XROAD_TOKEN_PIN="${XROAD_TOKEN_PIN}"
            export POSTGRES_ENABLED="true"
            export SECRETS_ENABLED="false"
            export APPLICATION_ENABLED="false"
            cp ./information-mediator/values.yaml val.yaml
            sed -i 's/${NAMESPACE}/'"$NAMESPACE"'/g' val.yaml
            sed -i 's/${XROAD_CS_ENABLED}/'"$XROAD_CS_ENABLED"'/g' val.yaml
            sed -i 's/${XROAD_SSC_ENABLED}/'"$XROAD_SSC_ENABLED"'/g' val.yaml
            sed -i 's/${XROAD_SSM_ENABLED}/'"$XROAD_SSM_ENABLED"'/g' val.yaml
            sed -i 's/${XROAD_SSP_ENABLED}/'"$XROAD_SSP_ENABLED"'/g' val.yaml
            sed -i 's/${PGDATA}/'"$PGDATA"'/g' val.yaml
            sed -i 's/${POSTGRES_USER}/'"$POSTGRES_USER"'/g' val.yaml
            sed -i 's/${XROAD_TOKEN_PIN}/'"$XROAD_TOKEN_PIN"'/g' val.yaml
            sed -i 's/${POSTGRES_ENABLED}/'"$POSTGRES_ENABLED"'/g' val.yaml
            sed -i 's/${SECRETS_ENABLED}/'"$SECRETS_ENABLED"'/g' val.yaml
            sed -i 's/${APPLICATION_ENABLED}/'"$APPLICATION_ENABLED"'/g' val.yaml
                        
            helm install information-mediator ./information-mediator/ -f val.yaml
      - run:
          name: Install X-Road components for Information Mediator
          command: |
            export NAMESPACE="${AWS_NAMESPACE}"
            export XROAD_CS_ENABLED="${XROAD_CS_ENABLED}"
            export XROAD_SSC_ENABLED="${XROAD_SSC_ENABLED}"
            export XROAD_SSM_ENABLED="${XROAD_SSM_ENABLED}"
            export XROAD_SSP_ENABLED="${XROAD_SSP_ENABLED}"
            export PGDATA_FOLDER="${PGDATA}"
            export PGDATA=$(echo ${PGDATA_FOLDER//\//\\/})
            export POSTGRES_USER="${POSTGRES_USER}"
            export XROAD_TOKEN_PIN="${XROAD_TOKEN_PIN}"
            export POSTGRES_ENABLED="true"
            export SECRETS_ENABLED="false"
            export APPLICATION_ENABLED="true"
            export ECR_CS_REPO="463471358064.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com\/${AWS_ECR_REPO_NAME_PREFIX}\/${AWS_ECR_CS_REPO_NAME}"
            export ECR_SS_REPO="463471358064.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com\/${AWS_ECR_REPO_NAME_PREFIX}\/${AWS_ECR_SS_REPO_NAME}"
            export CS_DB_HOST=$(kubectl get service govstack-xroad-cs-postgres -o jsonpath='{.spec.clusterIP}' -n $NAMESPACE)
            export CS_DB_PORT=$(kubectl get service govstack-xroad-cs-postgres -o jsonpath='{.spec.ports[0].port}' -n $NAMESPACE)
            export CS_DB_ADMIN_USER=$POSTGRES_USER
            export CS_DB_ADMIN_PASS=$(kubectl get secret govstack-xroad-cs-postgres-admin-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export CS_DB_UI_PASS=$(kubectl get secret govstack-xroad-cs-postgres-centerui-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export SSC_DB_HOST=$(kubectl get service govstack-xroad-ssc-postgres -o jsonpath='{.spec.clusterIP}' -n $NAMESPACE)
            export SSC_DB_PORT=$(kubectl get service govstack-xroad-ssc-postgres -o jsonpath='{.spec.ports[0].port}' -n $NAMESPACE)            
            export SSC_DB_ADMIN_USER=$POSTGRES_USER
            export SSC_DB_ADMIN_PASS=$(kubectl get secret govstack-xroad-ssc-postgres-admin-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export SSC_DB_SERVERCONF_ADMIN_PASS=$(kubectl get secret govstack-xroad-ssc-postgres-serverconf-admin-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export SSC_DB_MESSAGELOG_ADMIN_PASS=$(kubectl get secret govstack-xroad-ssc-postgres-messagelog-admin-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export SSC_DB_SERVERCONF_PASS=$(kubectl get secret govstack-xroad-ssc-postgres-serverconf-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export SSC_DB_MESSAGELOG_PASS=$(kubectl get secret govstack-xroad-ssc-postgres-messagelog-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)               
            export SSM_DB_HOST=$(kubectl get service govstack-xroad-ssm-postgres -o jsonpath='{.spec.clusterIP}' -n $NAMESPACE)
            export SSM_DB_PORT=$(kubectl get service govstack-xroad-ssm-postgres -o jsonpath='{.spec.ports[0].port}' -n $NAMESPACE)            
            export SSM_DB_ADMIN_USER=$POSTGRES_USER
            export SSM_DB_ADMIN_PASS=$(kubectl get secret govstack-xroad-ssm-postgres-admin-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export SSM_DB_SERVERCONF_ADMIN_PASS=$(kubectl get secret govstack-xroad-ssm-postgres-serverconf-admin-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export SSM_DB_MESSAGELOG_ADMIN_PASS=$(kubectl get secret govstack-xroad-ssm-postgres-messagelog-admin-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export SSM_DB_SERVERCONF_PASS=$(kubectl get secret govstack-xroad-ssm-postgres-serverconf-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export SSM_DB_MESSAGELOG_PASS=$(kubectl get secret govstack-xroad-ssm-postgres-messagelog-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)               
            export SSP_DB_HOST=$(kubectl get service govstack-xroad-ssp-postgres -o jsonpath='{.spec.clusterIP}' -n $NAMESPACE)
            export SSP_DB_PORT=$(kubectl get service govstack-xroad-ssp-postgres -o jsonpath='{.spec.ports[0].port}' -n $NAMESPACE)            
            export SSP_DB_ADMIN_USER=$POSTGRES_USER
            export SSP_DB_ADMIN_PASS=$(kubectl get secret govstack-xroad-ssp-postgres-admin-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export SSP_DB_SERVERCONF_ADMIN_PASS=$(kubectl get secret govstack-xroad-ssp-postgres-serverconf-admin-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export SSP_DB_MESSAGELOG_ADMIN_PASS=$(kubectl get secret govstack-xroad-ssp-postgres-messagelog-admin-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export SSP_DB_SERVERCONF_PASS=$(kubectl get secret govstack-xroad-ssp-postgres-serverconf-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)
            export SSP_DB_MESSAGELOG_PASS=$(kubectl get secret govstack-xroad-ssp-postgres-messagelog-secret -o jsonpath='{.data.password}' --namespace $NAMESPACE | base64 --decode)        
            cp ./information-mediator/values.yaml val.yaml
            sed -i 's/${NAMESPACE}/'"$NAMESPACE"'/g' val.yaml
            sed -i 's/${XROAD_CS_ENABLED}/'"$XROAD_CS_ENABLED"'/g' val.yaml
            sed -i 's/${XROAD_SSC_ENABLED}/'"$XROAD_SSC_ENABLED"'/g' val.yaml
            sed -i 's/${XROAD_SSM_ENABLED}/'"$XROAD_SSM_ENABLED"'/g' val.yaml
            sed -i 's/${XROAD_SSP_ENABLED}/'"$XROAD_SSP_ENABLED"'/g' val.yaml
            sed -i 's/${PGDATA}/'"$PGDATA"'/g' val.yaml
            sed -i 's/${POSTGRES_USER}/'"$POSTGRES_USER"'/g' val.yaml
            sed -i 's/${XROAD_TOKEN_PIN}/'"$XROAD_TOKEN_PIN"'/g' val.yaml
            sed -i 's/${POSTGRES_ENABLED}/'"$POSTGRES_ENABLED"'/g' val.yaml
            sed -i 's/${SECRETS_ENABLED}/'"$SECRETS_ENABLED"'/g' val.yaml
            sed -i 's/${APPLICATION_ENABLED}/'"$APPLICATION_ENABLED"'/g' val.yaml
            sed -i 's/${ECR_CS_REPO}/'"$ECR_CS_REPO"'/g' val.yaml
            sed -i 's/${ECR_SS_REPO}/'"$ECR_SS_REPO"'/g' val.yaml
            sed -i 's/${CS_DB_HOST}/'"$CS_DB_HOST"'/g' val.yaml
            sed -i 's/${CS_DB_PORT}/'"$CS_DB_PORT"'/g' val.yaml
            sed -i 's/${CS_DB_ADMIN_USER}/'"$CS_DB_ADMIN_USER"'/g' val.yaml
            sed -i 's/${CS_DB_ADMIN_PASS}/'"$CS_DB_ADMIN_PASS"'/g' val.yaml
            sed -i 's/${CS_DB_UI_PASS}/'"$CS_DB_UI_PASS"'/g' val.yaml
            sed -i 's/${SSC_DB_HOST}/'"$SSC_DB_HOST"'/g' val.yaml
            sed -i 's/${SSC_DB_PORT}/'"$SSC_DB_PORT"'/g' val.yaml
            sed -i 's/${SSC_DB_ADMIN_USER}/'"$SSC_DB_ADMIN_USER"'/g' val.yaml
            sed -i 's/${SSC_DB_ADMIN_PASS}/'"$SSC_DB_ADMIN_PASS"'/g' val.yaml
            sed -i 's/${SSC_DB_SERVERCONF_ADMIN_PASS}/'"$SSC_DB_SERVERCONF_ADMIN_PASS"'/g' val.yaml
            sed -i 's/${SSC_DB_MESSAGELOG_ADMIN_PASS}/'"$SSC_DB_MESSAGELOG_ADMIN_PASS"'/g' val.yaml
            sed -i 's/${SSC_DB_SERVERCONF_PASS}/'"$SSC_DB_SERVERCONF_PASS"'/g' val.yaml
            sed -i 's/${SSC_DB_MESSAGELOG_PASS}/'"$SSC_DB_MESSAGELOG_PASS"'/g' val.yaml
            sed -i 's/${SSM_DB_HOST}/'"$SSM_DB_HOST"'/g' val.yaml
            sed -i 's/${SSM_DB_PORT}/'"$SSM_DB_PORT"'/g' val.yaml
            sed -i 's/${SSM_DB_ADMIN_USER}/'"$SSM_DB_ADMIN_USER"'/g' val.yaml
            sed -i 's/${SSM_DB_ADMIN_PASS}/'"$SSM_DB_ADMIN_PASS"'/g' val.yaml
            sed -i 's/${SSM_DB_SERVERCONF_ADMIN_PASS}/'"$SSM_DB_SERVERCONF_ADMIN_PASS"'/g' val.yaml
            sed -i 's/${SSM_DB_MESSAGELOG_ADMIN_PASS}/'"$SSM_DB_MESSAGELOG_ADMIN_PASS"'/g' val.yaml
            sed -i 's/${SSM_DB_SERVERCONF_PASS}/'"$SSM_DB_SERVERCONF_PASS"'/g' val.yaml
            sed -i 's/${SSM_DB_MESSAGELOG_PASS}/'"$SSM_DB_MESSAGELOG_PASS"'/g' val.yaml
            sed -i 's/${SSP_DB_HOST}/'"$SSP_DB_HOST"'/g' val.yaml
            sed -i 's/${SSP_DB_PORT}/'"$SSP_DB_PORT"'/g' val.yaml
            sed -i 's/${SSP_DB_ADMIN_USER}/'"$SSP_DB_ADMIN_USER"'/g' val.yaml
            sed -i 's/${SSP_DB_ADMIN_PASS}/'"$SSP_DB_ADMIN_PASS"'/g' val.yaml
            sed -i 's/${SSP_DB_SERVERCONF_ADMIN_PASS}/'"$SSP_DB_SERVERCONF_ADMIN_PASS"'/g' val.yaml
            sed -i 's/${SSP_DB_MESSAGELOG_ADMIN_PASS}/'"$SSP_DB_MESSAGELOG_ADMIN_PASS"'/g' val.yaml
            sed -i 's/${SSP_DB_SERVERCONF_PASS}/'"$SSP_DB_SERVERCONF_PASS"'/g' val.yaml
            sed -i 's/${SSP_DB_MESSAGELOG_PASS}/'"$SSP_DB_MESSAGELOG_PASS"'/g' val.yaml
            
            helm upgrade --install information-mediator ./information-mediator/ -f val.yaml
      - run:
          name: Delete temporary values file
          command: |
            rm val.yaml               
workflows:
  Deploy IM to EKS cluster:
    jobs:
      - hold:
          type: approval
      - deploy-information-mediator:
          context: aws
          requires: 
            - hold
