version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-eks: circleci/aws-eks@2.1.2
  helm: circleci/helm@1.0
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  deploy-information-mediator-images:
    docker:
      - image: cimg/aws:2022.06
    parameters:
      create_cs_image:
        default: IM_XROAD_CREATE_CS_IMAGE
        type: env_var_name
      create_ssm_image:
        default: IM_XROAD_CREATE_SSM_IMAGE
        type: env_var_name
      create_ssc_image:
        default: IM_XROAD_CREATE_SSC_IMAGE
        type: env_var_name
      create_ssp_image:
        default: IM_XROAD_CREATE_SSP_IMAGE
        type: env_var_name                              
    steps:
      - when:
          condition:
            equal: [ true, "${<< parameters.create_cs_image >>}" ]            
          steps:
            - checkout
            - setup_remote_docker:
                version: 20.10.14
            - aws-cli/setup:
                role-arn: 'arn:aws:iam::${AWS_ACCOUNT}:role/${AWS_ROLE}'
                aws-region: AWS_DEFAULT_REGION
                profile-name: ${AWS_ROLE}
                role-session-name: CircleSession
                session-duration: '1800' 
            - run:
                name: Create and deploy container for X-Road Central Server
                command: |
                  echo "Create and deploy container for X-Road Central Server"
                  # docker run -p 4000:4000 -p 4001:80 -p 4002:9998 --name cs ${IM_XROAD_CENTRAL_SERVER_DOCKERHUB_IMAGE}
                  # export CID=$(docker ps -aqf "name=cs")
                  # docker cp central-server-entrypoint.sh $CID:/root/entrypoint.sh
                  # aws s3 cp s3://${AWS_IM_S3_BUCKET}/${AWS_IM_S3_BUCKET_CS_FOLDER}/${AWS_IM_S3_BUCKET_CS_BACKUP_FILE} . --profile ${AWS_ROLE}
                  # docker cp ${AWS_IM_S3_BUCKET_CS_BACKUP_FILE} $CID:/var/lib/xroad/backup/conf_backup.tar
                  # docker exec -it --user xroad $CID bin/bash -c '/usr/share/xroad/scripts/restore_xroad_center_configuration.sh -i ${IM_XROAD_INSTANCE} -f /var/lib/xroad/backup/conf_backup.tar'
                  # docker commit $CID ${IM_XROAD_CS_IMAGE_NAME}
                  # aws ecr get-login-password --region ${AWS_DEFAULT_REGION} --profile ${AWS_ROLE} | docker login --username AWS --password-stdin ${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                  # docker tag ${IM_XROAD_CS_IMAGE_NAME}:latest ${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPO_IM_PREFIX}/${AWS_ECR_REPO_XROAD_PREFIX}/${AWS_ECR_CS_REPO_NAME}:${IM_XROAD_CS_IMAGE_NAME}
                  # docker push ${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPO_IM_PREFIX}/${AWS_ECR_REPO_XROAD_PREFIX}/${AWS_ECR_CS_REPO_NAME}:${IM_XROAD_CS_IMAGE_NAME}
      - when:
          condition:
            equal: [ true, "${<< parameters.create_ssm_image >>}" ]
          steps:
            - checkout
            - setup_remote_docker:
                version: 20.10.14
            - aws-cli/setup:
                role-arn: 'arn:aws:iam::${AWS_ACCOUNT}:role/${AWS_ROLE}'
                aws-region: AWS_DEFAULT_REGION
                profile-name: ${AWS_ROLE}
                role-session-name: CircleSession
                session-duration: '1800' 
            - run:
                name: Create and deploy container for X-Road Security Server with management services 
                command: |
                  echo "Create and deploy container for X-Road Security Server with management services"
                  # docker run -p 4100:4000 -p 8081:8080 --name ssm -e XROAD_TOKEN_PIN=${IM_XROAD_TOKEN_PIN} ${IM_XROAD_SECURITY_SERVER_DOCKERHUB_IMAGE}
                  # export CID=$(docker ps -aqf "name=ssm")
                  # docker cp security-server-entrypoint.sh $CID:/root/entrypoint.sh
                  # aws s3 cp s3://${AWS_IM_S3_BUCKET}/${AWS_IM_S3_BUCKET_SS_FOLDER}/${AWS_IM_S3_BUCKET_SSM_BACKUP_FILE} . --profile ${AWS_ROLE}
                  # docker cp ${AWS_IM_S3_BUCKET_SSM_BACKUP_FILE} $CID:/var/lib/xroad/backup/conf_backup.gpg
                  # docker exec -it --user xroad $CID bin/bash -c '/usr/share/xroad/scripts/restore_xroad_proxy_configuration.sh -s ${IM_XROAD_SSM_ID} -f /var/lib/xroad/backup/conf_backup.gpg'
                  # docker commit $CID ${IM_XROAD_SSM_IMAGE_NAME}
                  # aws ecr get-login-password --region ${AWS_DEFAULT_REGION} --profile ${AWS_ROLE} | docker login --username AWS --password-stdin ${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                  # docker tag ${IM_XROAD_SSM_IMAGE_NAME}:latest ${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPO_IM_PREFIX}/${AWS_ECR_REPO_XROAD_PREFIX}/${AWS_ECR_SS_REPO_NAME}:${IM_XROAD_SSM_IMAGE_NAME}
                  # docker push ${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPO_IM_PREFIX}/${AWS_ECR_REPO_XROAD_PREFIX}/${AWS_ECR_SS_REPO_NAME}:${IM_XROAD_SSM_IMAGE_NAME}            
      - when:
          condition:
            equal: [ true, "${<< parameters.create_ssc_image >>}" ]
          steps:
            - checkout
            - setup_remote_docker:
                version: 20.10.14
            - aws-cli/setup:
                role-arn: 'arn:aws:iam::${AWS_ACCOUNT}:role/${AWS_ROLE}'
                aws-region: AWS_DEFAULT_REGION
                profile-name: ${AWS_ROLE}
                role-session-name: CircleSession
                session-duration: '1800'
            - run:
                name: Create and deploy container for X-Road consumer Security Server 
                command: |
                  echo "Create and deploy container for X-Road consumer Security Server"
                  # docker run -p 4200:4000 -p 8082:8080 --name ssc -e XROAD_TOKEN_PIN=${IM_XROAD_TOKEN_PIN} ${IM_XROAD_SECURITY_SERVER_DOCKERHUB_IMAGE}
                  # export CID=$(docker ps -aqf "name=ssc")
                  # docker cp security-server-entrypoint.sh $CID:/root/entrypoint.sh
                  # aws s3 cp s3://${AWS_IM_S3_BUCKET}/${AWS_IM_S3_BUCKET_SS_FOLDER}/${AWS_IM_S3_BUCKET_SSC_BACKUP_FILE} . --profile ${AWS_ROLE}
                  # docker cp ${AWS_IM_S3_BUCKET_SSC_BACKUP_FILE} $CID:/var/lib/xroad/backup/conf_backup.gpg
                  # docker exec -it --user xroad $CID bin/bash -c '/usr/share/xroad/scripts/restore_xroad_proxy_configuration.sh -s ${IM_XROAD_SSC_ID} -f /var/lib/xroad/backup/conf_backup.gpg'
                  # docker commit $CID ${IM_XROAD_SSC_IMAGE_NAME}
                  # aws ecr get-login-password --region ${AWS_DEFAULT_REGION} --profile ${AWS_ROLE} | docker login --username AWS --password-stdin ${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                  # docker tag ${IM_XROAD_SSC_IMAGE_NAME}:latest ${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPO_IM_PREFIX}/${AWS_ECR_REPO_XROAD_PREFIX}/${AWS_ECR_SS_REPO_NAME}:${IM_XROAD_SSC_IMAGE_NAME}
                  # docker push ${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPO_IM_PREFIX}/${AWS_ECR_REPO_XROAD_PREFIX}/${AWS_ECR_SS_REPO_NAME}:${IM_XROAD_SSC_IMAGE_NAME}                         
      - when:
          condition:
            equal: [ true, "${<< parameters.create_ssp_image >>}" ]
          steps:
            - checkout
            - setup_remote_docker:
                version: 20.10.14
            - aws-cli/setup:
                role-arn: 'arn:aws:iam::${AWS_ACCOUNT}:role/${AWS_ROLE}'
                aws-region: AWS_DEFAULT_REGION
                profile-name: ${AWS_ROLE}
                role-session-name: CircleSession
                session-duration: '1800'
            - run:
                name: Create and deploy container for X-Road provider Security Server 
                command: |
                  echo "Create and deploy container for X-Road provider Security Server"
                  # docker run -p 4300:4000 -p 8083:8080 --name ssp -e XROAD_TOKEN_PIN=${IM_XROAD_TOKEN_PIN} ${IM_XROAD_SECURITY_SERVER_DOCKERHUB_IMAGE}
                  # export CID=$(docker ps -aqf "name=ssp")
                  # docker cp security-server-entrypoint.sh $CID:/root/entrypoint.sh
                  # aws s3 cp s3://${AWS_IM_S3_BUCKET}/${AWS_IM_S3_BUCKET_SS_FOLDER}/${AWS_IM_S3_BUCKET_SSP_BACKUP_FILE} . --profile ${AWS_ROLE}
                  # docker cp ${AWS_IM_S3_BUCKET_SSP_BACKUP_FILE} $CID:/var/lib/xroad/backup/conf_backup.gpg
                  # docker exec -it --user xroad $CID bin/bash -c '/usr/share/xroad/scripts/restore_xroad_proxy_configuration.sh -s ${IM_XROAD_SSP_ID} -f /var/lib/xroad/backup/conf_backup.gpg'
                  # docker commit $CID ${IM_XROAD_SSP_IMAGE_NAME}
                  # aws ecr get-login-password --region ${AWS_DEFAULT_REGION} --profile ${AWS_ROLE} | docker login --username AWS --password-stdin ${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                  # docker tag ${IM_XROAD_SSP_IMAGE_NAME}:latest ${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPO_IM_PREFIX}/${AWS_ECR_REPO_XROAD_PREFIX}/${AWS_ECR_SS_REPO_NAME}:${IM_XROAD_SSP_IMAGE_NAME}
                  # docker push ${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_ECR_REPO_IM_PREFIX}/${AWS_ECR_REPO_XROAD_PREFIX}/${AWS_ECR_SS_REPO_NAME}:${IM_XROAD_SSP_IMAGE_NAME}                                                                                                                              
workflows:
  Deploy IM to EKS cluster:
    jobs:
      - wait:
          type: approval
      - deploy-information-mediator-images:
          context: aws
          requires: 
            - wait
      #- hold:
      #    type: approval       
      #- deploy-information-mediator:
      #    context: aws
      #    requires: 
      #      - hold
