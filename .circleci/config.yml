version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-eks: circleci/aws-eks@2.1.2
  helm: circleci/helm@1.0
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  deploy-information-mediator:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - helm/install-helm-client:
          version: v3.0.0
      - aws-cli/setup:
          role-arn: 'arn:aws:iam::463471358064:role/CircleCIRole'
          aws-region: AWS_DEFAULT_REGION
          profile-name: CircleCIRole
          role-session-name: CircleSession
          session-duration: '1800' 
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: GovStack_sandbox
          cluster-authentication-role-arn: arn:aws:iam::463471358064:role/CircleCIRole
      - run:
          name: Debug
          command: aws sts get-caller-identity
      - run:
          name: Update kubectl
          command: |
            aws eks update-kubeconfig --region eu-central-1 --name GovStack_sandbox --role-arn arn:aws:iam::463471358064:role/CircleCIRole
      - run:
          name: Update IM with Helm charts
          command: |
            helm upgrade --install information-mediator ./information-mediator/
      - run:
          name: Run shell script for creation of X-Road CS image and push to AWS ECR
          command: |
            db_name="cs-db"
            namespace="govstack"
            db_host=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.address}' -n $namespace)
            db_port=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.port}' -n $namespace)
            db_user=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUsername}' -n $namespace)
            secret_name=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUserPassword.name}' -n $namespace)
            base64 --help
            db_pass=$(kubectl get secret $secret_name -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            container_name="cs"
            image_name="xroad-cs"
            centerui_user_pass=$(kubectl get secret cs-db-centerui-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            aws_ecr="463471358064.dkr.ecr.eu-central-1.amazonaws.com/govstackecr"
            aws_profile="CircleCIRole"
            cd Docker/centralserver
            ./run.sh -h $db_host -i $db_port -u $db_user -p $db_pass -n $container_name -m $image_name -x $centerui_user_pass
            cd ..
            ./push.sh -c $container_name -e $aws_ecr -i $image_name -p $aws_profile_name
      - run:
          name: Run shell script for creation of X-Road SSC image and push to AWS ECR
          command: |
            db_name="ssc-db"
            namespace="govstack"
            db_host=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.address}' -n $namespace)
            db_port=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.port}' -n $namespace)
            db_user=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUsername}' -n $namespace)
            secret_name=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUserPassword.name}' -n $namespace)
            db_pass=$(kubectl get secret $secret_name -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            container_name="ss1"
            image_name="xroad-ssc"
            serverconf_admin_pass=$(kubectl get secret ssc-db-serverconf-admin-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode
            messagelog_admin_pass=$(kubectl get secret ssc-db-messagelog-admin-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            opmon_admin_pass=$(kubectl get secret ssc-db-opmon-admin-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            serverconf_pass=$(kubectl get secret ssc-db-serverconf-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            messagelog_pass=$(kubectl get secret ssc-db-messagelog-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            opmon_pass=$(kubectl get secret ssc-db-opmon-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)            
            aws_ecr="463471358064.dkr.ecr.eu-central-1.amazonaws.com/govstackecr"
            aws_profile="CircleCIRole"
            cd Docker/securityserver
            ./run.sh -h $db_host -i $db_port -u $db_user -p $db_pass -n $container_name -r \
            $serverconf_admin_pass -s $messagelog_admin_pass -t $opmon_admin_pass -v $serverconf_pass -w $messagelog_pass -x $opmon_pass
            cd ..
            ./push.sh -c $container_name -e $aws_ecr -i $image_name -p $aws_profile_name            
      - run:
          name: Run shell script for creation of X-Road SSM image and push to AWS ECR
          command: |
            db_name="ssm-db"
            namespace="govstack"
            db_host=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.address}' -n $namespace)
            db_port=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.port}' -n $namespace)
            db_user=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUsername}' -n $namespace)
            secret_name=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUserPassword.name}' -n $namespace)
            db_pass=$(kubectl get secret $secret_name -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            container_name="ss2"
            image_name="xroad-ssm"
            serverconf_admin_pass=$(kubectl get secret ssm-db-serverconf-admin-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            messagelog_admin_pass=$(kubectl get secret ssm-db-messagelog-admin-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            opmon_admin_pass=$(kubectl get secret ssm-db-opmon-admin-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            serverconf_pass=$(kubectl get secret ssm-db-serverconf-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            messagelog_pass=$(kubectl get secret ssm-db-messagelog-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            opmon_pass=$(kubectl get secret ssm-db-opmon-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)            
            aws_ecr="463471358064.dkr.ecr.eu-central-1.amazonaws.com/govstackecr"
            aws_profile="CircleCIRole"
            cd Docker/securityserver
            ./run.sh -h $db_host -i $db_port -u $db_user -p $db_pass -n $container_name -r \
            $serverconf_admin_pass -s $messagelog_admin_pass -t $opmon_admin_pass -v $serverconf_pass -w $messagelog_pass -x $opmon_pass
            cd ..
            ./push.sh -c $container_name -e $aws_ecr -i $image_name -p $aws_profile_name
      - run:
          name: Run shell script for creation of X-Road SSP image and push to AWS ECR
          command: |
            db_name="ssm-db"
            namespace="govstack"
            db_host=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.address}' -n $namespace)
            db_port=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.port}' -n $namespace)
            db_user=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUsername}' -n $namespace)
            secret_name=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUserPassword.name}' -n $namespace)
            db_pass=$(kubectl get secret $secret_name -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            container_name="ss3"
            image_name="xroad-ssp"
            serverconf_admin_pass=$(kubectl get secret ssp-db-serverconf-admin-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            messagelog_admin_pass=$(kubectl get secret ssp-db-messagelog-admin-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            opmon_admin_pass=$(kubectl get secret ssp-db-opmon-admin-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            serverconf_pass=$(kubectl get secret ssp-db-serverconf-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            messagelog_pass=$(kubectl get secret ssp-db-messagelog-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)
            opmon_pass=$(kubectl get secret ssp-db-opmon-secret -o jsonpath='{.data}' --namespace $namespace | base64 --decode)            
            aws_ecr="463471358064.dkr.ecr.eu-central-1.amazonaws.com/govstackecr"
            aws_profile="CircleCIRole"
            cd Docker/securityserver
            ./run.sh -h $db_host -i $db_port -u $db_user -p $db_pass -n $container_name -r \
            $serverconf_admin_pass -s $messagelog_admin_pass -t $opmon_admin_pass -v $serverconf_pass -w $messagelog_pass -x $opmon_pass
            cd ..
            ./push.sh -c $container_name -e $aws_ecr -i $image_name -p $aws_profile_name
      - run:
          name: Update IM with Helm charts pulling update X-Road images from ECR
          command: |
            helm upgrade --install information-mediator ./information-mediator/                                    
workflows:
  Deploy IM to EKS cluster:
    jobs:
      - hold:
          type: approval
      - deploy-information-mediator:
          context: aws
          requires: 
            - hold
