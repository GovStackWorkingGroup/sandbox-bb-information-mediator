version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-eks: circleci/aws-eks@2.1.2
  helm: circleci/helm@1.0
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  deploy-information-mediator:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - helm/install-helm-client:
          version: v3.0.0
      - aws-cli/setup:
          role-arn: 'arn:aws:iam::463471358064:role/CircleCIRole'
          aws-region: AWS_DEFAULT_REGION
          profile-name: CircleCIRole
          role-session-name: CircleSession
          session-duration: '1800' 
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: GovStack_sandbox
          cluster-authentication-role-arn: arn:aws:iam::463471358064:role/CircleCIRole
      - run:
          name: Debug
          command: aws sts get-caller-identity
      - run:
          name: Update kubectl
          command: |
            aws eks update-kubeconfig --region eu-central-1 --name GovStack_sandbox --role-arn arn:aws:iam::463471358064:role/CircleCIRole         
      - run:
          name: Install Information Mediator
          command: |
            helm upgrade --install information-mediator ./information-mediator/
      - run:
          name: Update Information Mediator
          command: |
            db_name="cs-db"
            namespace="govstack"
            export CS_DB_HOST=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.address}' -n $namespace)
            export CS_DB_PORT=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.port}' -n $namespace)
            export CS_DB_ADMIN_USER=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUsername}' -n $namespace)
            secret_name=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUserPassword.name}' -n $namespace)
            export CS_DB_ADMIN_PASS=$(kubectl get secret $secret_name -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)
            export CS_DB_UI_PASS=$(kubectl get secret cs-db-centerui-secret -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)

            db_name="ssc-db"
            export SSC_DB_HOST=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.address}' -n $namespace)
            export SSC_DB_PORT=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.port}' -n $namespace)
            export SSC_DB_ADMIN_USER=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUsername}' -n $namespace)
            secret_name=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUserPassword.name}' -n $namespace)
            export SSC_DB_ADMIN_PASS=$(kubectl get secret $secret_name -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)
            export SSC_DB_SERVERCONF_ADMIN_PASS=$(kubectl get secret ssc-db-serverconf-admin-secret -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode
            export SSC_DB_MESSAGELOG_ADMIN_PASS=$(kubectl get secret ssc-db-messagelog-admin-secret -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)
            export SSC_DB_SERVERCONF_PASS=$(kubectl get secret ssc-db-serverconf-secret -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)
            export SSC_DB_MESSAGELOG_PASS=$(kubectl get secret ssc-db-messagelog-secret -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)          

            db_name="ssm-db"
            export SSM_DB_HOST=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.address}' -n $namespace)
            export SSM_DB_PORT=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.port}' -n $namespace)
            export SSM_DB_ADMIN_USER=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUsername}' -n $namespace)
            secret_name=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUserPassword.name}' -n $namespace)
            export SSM_DB_ADMIN_PASS=$(kubectl get secret $secret_name -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)
            export SSM_DB_SERVERCONF_ADMIN_PASS=$(kubectl get secret ssc-db-serverconf-admin-secret -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode
            export SSM_DB_MESSAGELOG_ADMIN_PASS=$(kubectl get secret ssc-db-messagelog-admin-secret -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)
            export SSM_DB_SERVERCONF_PASS=$(kubectl get secret ssc-db-serverconf-secret -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)
            export SSM_DB_MESSAGELOG_PASS=$(kubectl get secret ssc-db-messagelog-secret -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)           

            db_name="ssp-db"
            export SSP_DB_HOST=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.address}' -n $namespace)
            export SSP_DB_PORT=$(kubectl get DBInstance $db_name -o jsonpath='{.status.endpoint.port}' -n $namespace)
            export SSP_DB_ADMIN_USER=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUsername}' -n $namespace)
            secret_name=$(kubectl get DBInstance $db_name -o jsonpath='{.spec.masterUserPassword.name}' -n $namespace)
            export SSP_DB_ADMIN_PASS=$(kubectl get secret $secret_name -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)
            export SSP_DB_SERVERCONF_ADMIN_PASS=$(kubectl get secret ssc-db-serverconf-admin-secret -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode
            export SSP_DB_MESSAGELOG_ADMIN_PASS=$(kubectl get secret ssc-db-messagelog-admin-secret -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)
            export SSP_DB_SERVERCONF_PASS=$(kubectl get secret ssc-db-serverconf-secret -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)
            export SSP_DB_MESSAGELOG_PASS=$(kubectl get secret ssc-db-messagelog-secret -o jsonpath='{.data.password}' --namespace $namespace | base64 --decode)         
 
            helm upgrade --install information-mediator ./information-mediator/                                    
workflows:
  Deploy IM to EKS cluster:
    jobs:
      - hold:
          type: approval
      - deploy-information-mediator:
          context: aws
          requires: 
            - hold
